pay attention to the stack
in this version stack starts at #7FE6

at start #8000 stack is #7FE8
setup stack goes down to #7FE4
when finished goes back to #7FE8

play (C005)starts at #7FE8
jumps to #C4C8
@ #c50c stack is stored
@ #c510 stack changes to #C97D
stack goes down to c981

@C51F stack changes to #7FE6
goes as low as #7FE2


in z88dk @#c510 stack changes to #C97D
however, there is data there already






;Test codes (commented)
;Entry and other points
;START initialize playing of module at MDLADDR
;START+3 initialization with module address in HL
;START+5 play one quark
;START+8 mute
;START+10 setup and status flags
;START+11 current position value (byte) (optional)

;START
;	LD HL,MDLADDR	;START
;	JR INIT			;START+3
;	JP PLAY			;START+5
;	JR MUTE			;START+8
;SETUP	DB 0 		;START+10
;CurPos	DB 0 		;START+11
	SECTION MAIN
	ORG 0x8000


lockandload:


	call UNCOMP_SONG

	ld hl, BUFFER_UNCOMP
	;ld hl, song1

	LD A,2
    LD (START+10),A
    CALL START+3
    EI

_LP:
	HALT

	CALL START+5
	XOR A	;test keyboard
	IN A,($FE)
	CPL
	AND 15
	JR Z, _LP

	JP START+8
ret

; ZX0 Parameters:
; HL: source address (compressed data)
; DE: destination address (decompressing)
UNCOMP_SONG:
	ld hl, TABLA_SONG_CMP
	;;;;;;;;;;;;;
	;which song to play
	ld a, 0; song number index starts at 0
	;;;;;;;;;;;;;
	call EXT_WORD
	ld de, BUFFER_UNCOMP
	call dzx0_standard
	ret

;EXTRACT A WORD FROM A TABLE
;IN:(HL)=ADDRESS TABLE
;   (A)= POSITION
;OUT(HL)=WORD
EXT_WORD:
    LD D,0
	RLCA
	LD E,A
	ADD HL,DE
	LD E,(HL)
	INC HL
	LD D,(HL)
	EX DE,HL
	RET
;----------------------------------












--------------------------------------
	PUBLIC _bank
	_bank:
		ld a,(0x5b5c)   ;//System variable with the previous value
		and 0xf8
		or L
		ld bc,0x7ffd		;//Port to write
		;;di
		ld (0x5b5c),a		;//Update system variable
		out   (c),a		;//Address
		;;ei				;//enable interupts
	ret



There are several sections the compiler
puts stuff into:

codeseg = code
constseg = constant data
bssseg = uninitialized variables
dataseg = initialized variables

You have to change the destination section
for each of those segments on the zcc line.

zsdcc can only do codeseg and constseg so
the recommended thing to do is declare anything
destined for bss or data sections in asm where
they can be placed properly.

example of c declarations:

extern int a;   // bss
extern int b = 10;   // data

Then in a separate asm file define the variables
placed in a specific section:

SECTION bss_name
PUBLIC _a
_a : defs 2

SECTION data_name
PUBLIC _b
_b : defw 10

That should be "extern int b;".
The C declarations are not creating space -
they only tell the compiler the variables
exist and are defined elsewhere.


